<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>StartBattleGameProtocols();
AIControllerStart();
buttonDelayFlag = false;

//Create the BattleGrid
battleRows = 15; //number of rows of playable grid
battleCols = 30; //number of columns in playble grid
for (i = 0; i &lt; battleRows; i += 1)
        {
        for (j = 0; j &lt; battleCols; j += 1)
            {
        battleGrid[i,j] = BATTLEGRID_EMPTY;
        }
    }
battleMode = BATTLEMODE_ENEMY_TURN;
//selectedMove Coords
selectedMoveCoord[0] = -1; //X 'initially a negative value to handle first clicks
selectedMoveCoord[1] = -1; //Y

//Tablets
previouslySelectedTablet = 0;

currentSelectedChar = 0;
//Setup Player and Spirit Characters
if object_exists(objPlayer)
    {
    objPlayer.x = 48;
    objPlayer.y = 336;
    //demo purposes
    objPlayer.spirit1 = instance_create(objPlayer.x + (16*6),objPlayer.y - (16*4),objSpat);
    with (objPlayer.spirit1)
        {
        self.tabletArray[0] = instance_create(x,y,objTablet);
        with (tabletArray[0])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[1] = instance_create(x,y,objTablet);
        with (tabletArray[1])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_2;
            initializeFlag = true;
            }
        self.tabletArray[2] = instance_create(x,y,objTablet);
        with (tabletArray[2])
            {
            tabletType = TABLET_DEF;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[3] = instance_create(x,y,objTablet);
        with (tabletArray[3])
            {
            tabletType = TABLET_BOOST;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[4] = instance_create(x,y,objTablet);
        with (tabletArray[4])
            {
            tabletType = TABLET_SPEC;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        }
    //SPIRIT 2____________________________________________________
    objPlayer.spirit2 = instance_create(objPlayer.x + (16*4),objPlayer.y + (16*4),objGlorber);
    with (objPlayer.spirit2)
        {
        self.tabletArray[0] = instance_create(x,y,objTablet);
        with (tabletArray[0])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[1] = instance_create(x,y,objTablet);
        with (tabletArray[1])
            {
            tabletType = TABLET_SPEC;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[2] = instance_create(x,y,objTablet);
        with (tabletArray[2])
            {
            tabletType = TABLET_DEF;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        }
    
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((global.selectedChar.path_position == 1) || (path_get_length(global.selectedChar.spiritPath) == 0))
    {
    buttonDelayFlag = false;
    characterCoord = GetInstanceBattleGridCoord(global.selectedChar);
    battleGrid[characterCoord[1],characterCoord[0]] = BATTLEGRID_CHARACTER_SELECTED
    }
else {
    alarm[0] = 5;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.selectedNewChar == true) //check for newly selceted character
    {
    if (global.selectedChar != currentSelectedChar) //same character check
        {
        if (currentSelectedChar &gt; 0)//first click check
            {
            with (currentSelectedChar.object_index) //reset currect character items
                {
                //Reset Tablets ---- Start
                for (i = 0; i &lt; 5; i += 1)
                    {
                    if (tabletArray[i] != 0)
                        {
                        with (tabletArray[i]) //objTablet
                            {
                            visible = false;
                            }
                        }
                    }
                //Reset Tablets ------End
                }
            //Reset Battle Grid
            BattleGridReset();
            }
        with (global.selectedChar.object_index)
            {
            for (i = 0; i &lt; 5; i += 1)
                {
                if (tabletArray[i] != 0)
                    {
                    with (tabletArray[i]) //objTablet
                        {
                        image_angle = objCorner_GUI.tabletAngleArray[other.i];
                        visible = true;
                        if path_exists(tabletPath)
                            {
                            path_clear_points(tabletPath);
                            path_add_point(tabletPath,x,y,4);
                            path_add_point(tabletPath,objCorner_GUI.tabletXArray[other.i],objCorner_GUI.tabletYArray[other.i],4);
                            path_set_kind(tabletPath,1);
                            path_set_precision(tabletPath, 1);
                            path_set_closed(tabletPath, false); 
                            }
                        //move_towards_point(objCorner_GUI.tabletXArray[other.i],objCorner_GUI.tabletYArray[other.i],4.0);
                        path_start(tabletPath,400,0,true);
                        }
                    }
                }
            }
        currentSelectedChar = global.selectedChar;
        global.selectedNewChar = false;
        
        //set BattleGrid cell to BATTLEGRID_CHARACTER_SELECTED
        instanceCoord = GetInstanceBattleGridCoord(global.selectedChar);
        battleGrid[instanceCoord[1],instanceCoord[0]] = BATTLEGRID_CHARACTER_SELECTED;
        battleMode = BATTLEMODE_MOVE; //set battle mode to show character moves
        BattleGridSet();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseGridCoord[0] = 0; //X
mouseGridCoord[1] = 0; //Y
buttonDelayAmount = 10;

//buttonDelay stops rapid fire
if (buttonDelayFlag == false)
    {
    //check that mouse is in battle grid
    if (mouse_y &lt;= (battleRows * 32))
        {
        //check if its a new character that was clicked on
        if ((collision_point(mouse_x,mouse_y,objCharacter,false,false) &gt; 0) &amp;&amp; (collision_point(mouse_x,mouse_y,objCharacter,false,false) != global.selectedChar))
            {
            global.selectedChar = collision_point(mouse_x,mouse_y,objCharacter,false,false);
            global.selectedNewChar = true;
            // set buttondelay
            buttonDelayFlag = true;
            alarm[0] = buttonDelayAmount;
            }
        else {
            mouseGridCoord = DetermineMouseGridCoord();
            //check battleMode
            switch (battleMode)
                {
                case BATTLEMODE_MOVE:
                    //check mouse Coord in battleGrid for move option
                    if (battleGrid[mouseGridCoord[1],mouseGridCoord[0]] == BATTLEGRID_MOVE)
                        {
                        //reset previous selected move psot
                        if ((selectedMoveCoord[0] &gt;= 0) &amp;&amp; (selectedMoveCoord[1] &gt;= 0))
                            {
                            battleGrid[selectedMoveCoord[1],selectedMoveCoord[0]] = BATTLEGRID_MOVE
                            }
                        battleGrid[mouseGridCoord[1],mouseGridCoord[0]] = BATTLEGRID_MOVE_SELECTED
                        selectedMoveCoord[0] = mouseGridCoord[0];
                        selectedMoveCoord[1] = mouseGridCoord[1];
                        }
                    else if (battleGrid[mouseGridCoord[1],mouseGridCoord[0]] == BATTLEGRID_MOVE_SELECTED)
                        {
                        with (global.selectedChar)
                            {
                            AISpiritPather(self.gridToUse,(other.selectedMoveCoord[0]*32)+16,(other.selectedMoveCoord[1]*32)+16);
                            if (path_exists(self.spiritPath) &amp;&amp; path_get_length(self.spiritPath) &gt; 0) 
                                {
                                path_start(self.spiritPath,self.moveSpeed,0,true);
                                self.movingFlag = true;
                                }
                            }
                        battleMode = BATTLEMODE_TABLET;
                        BattleGridReset();
                        
                        }
                    // set buttondelay
                    buttonDelayFlag = true;
                    alarm[0] = buttonDelayAmount;
                break;
                }
            }
        }
        //check if mouse in below battle grid, for GUI -------------------------------
        else if (mouse_y &gt; (battleRows * 32))
            {
            //Check for Tablet Click
            if (collision_point(mouse_x,mouse_y,objTablet,true,false) &gt; 0)
                {
                selectedTablet = collision_point(mouse_x,mouse_y,objTablet,true,false);
                if (selectedTablet != previouslySelectedTablet) //Is it a new tablet
                    {
                    previouslySelectedTablet.selectedFlag = false;
                    selectedTablet.selectedFlag = true;
                    previouslySelectedTablet = selectedTablet;
                    }
                //switch to Tablet battlemode and reset grid
                battleMode = BATTLEMODE_TABLET;
                BattleGridReset();
                //BattleGridSet();
                }
            // set buttondelay
            buttonDelayFlag = true;
            alarm[0] = buttonDelayAmount;
            }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW BASIC GRID
cellSize = 32;
for (i = 0; i &lt;= room_width; i += cellSize)
    {
    for (j = 0; j &lt;= 464; j += cellSize)
        {
        draw_sprite(sprGrid,1,i,j);
        }
    }

if (global.selectedChar &gt; 0) //character selected check
    {
    //DRAW BattleGrid
    for (i = 0; i &lt; array_height_2d(battleGrid); i += 1)
        {
        for (j = 0; j &lt; array_length_2d(battleGrid,0); j += 1)
            {
            switch (battleGrid[i,j])
                {
                case BATTLEGRID_MOVE:
                    draw_set_colour(make_colour_rgb(0,170,0));
                    draw_set_alpha(0.4);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                case BATTLEGRID_MOVE_SELECTED:
                    draw_set_colour(make_colour_rgb(0,255,0));
                    draw_set_alpha(0.6);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                case BATTLEGRID_MOVE_PATH:
                    draw_set_colour(make_colour_rgb(0,225,0));
                    draw_set_alpha(0.5);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                case BATTLEGRID_ATTACK:
                    draw_set_colour(make_colour_rgb(150,0,0));
                    draw_set_alpha(0.4);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                case BATTLEGRID_ATTACK_SELECTED:
                    draw_set_colour(make_colour_rgb(255,0,0));
                    draw_set_alpha(0.6);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                case BATTLEGRID_CHARACTER_SELECTED:
                    draw_set_colour(make_colour_rgb(255,255,0));
                    draw_set_alpha(0.4);
                    draw_rectangle(j*32,i*32,(j*32)+32,(i*32)+32,false);
                break;
                }
                //reset color
                draw_set_colour(c_white);
                draw_set_alpha(1.0);
            }
        }
    
    }
    
/*    
if (selectedChar &gt; 0)
    {
    //DRAW SELECTED CHARACTER HIGHLIGHT
    characterWidth = selectedChar.object_index.sprite_width;
    characterHeight = selectedChar.object_index.sprite_height;
    characterOriginX = selectedChar.object_index.x + (selectedChar.object_index.sprite_width / -2);
    characterOriginY = selectedChar.object_index.y + (selectedChar.object_index.sprite_height / -2);
    for (i = characterOriginX; i &lt; characterOriginX + characterWidth; i += cellSize)
        {
        for (j = characterOriginY; j &lt; characterOriginY + characterHeight; j += cellSize)
            {
            draw_sprite_ext(sprGrid,1,i,j,1,1,0,c_yellow,1);
            }
        }
    //DRAW MOVEMENT GRID OVERLAY
    //first we need to determine character origin in grid
    for (i = 0; i &lt; array_height_2d(selectedChar.object_index.moveGrid); i += 1)
        {
        for (j = 0; j &lt; array_length_2d(selectedChar.object_index.moveGrid,0); j += 1)
            {
            if (selectedChar.object_index.moveGrid[i,j] == 2)
                {
                gridX = j;
                gridY = i;
                }
            }
        }
    //set grid origin based on character origin
    gridX = characterOriginX - (cellSize * gridX);
    gridY = characterOriginY - (cellSize * gridY);
    for (i = 0; i &lt; array_height_2d(selectedChar.object_index.moveGrid); i += 1)
        {
        for (j = 0; j &lt; array_length_2d(selectedChar.object_index.moveGrid,0); j += 1)
            {
            if (selectedChar.object_index.moveGrid[i,j] == 1)
                {
                tempX = gridX + (cellSize * j);
                tempY = gridY + (cellSize * i);
                draw_sprite_ext(sprGrid,1,tempX,tempY,1,1,0,c_green,1);
                }
            
            }
        }
    }
*/

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
