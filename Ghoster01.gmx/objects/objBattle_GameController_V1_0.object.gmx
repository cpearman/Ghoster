<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>StartBattleGameProtocols();

currentSelectedChar = 0;

if object_exists(objPlayer)
    {
    objPlayer.x = 32;
    objPlayer.y = 320;
    //demo purposes
    objPlayer.spirit1 = instance_create(objPlayer.x + (16*7),objPlayer.y - (16*5),objSpat);
    with (objPlayer.spirit1)
        {
        self.tabletArray[0] = instance_create(x,y,objTablet);
        with (tabletArray[0])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[1] = instance_create(x,y,objTablet);
        with (tabletArray[1])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_2;
            initializeFlag = true;
            }
        self.tabletArray[2] = instance_create(x,y,objTablet);
        with (tabletArray[2])
            {
            tabletType = TABLET_DEF;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[3] = instance_create(x,y,objTablet);
        with (tabletArray[3])
            {
            tabletType = TABLET_BOOST;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[4] = instance_create(x,y,objTablet);
        with (tabletArray[4])
            {
            tabletType = TABLET_SPEC;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        }
    //SPIRIT 2____________________________________________________
    objPlayer.spirit2 = instance_create(objPlayer.x + (16*5),objPlayer.y + (16*5),objGlorber);
    with (objPlayer.spirit2)
        {
        self.tabletArray[0] = instance_create(x,y,objTablet);
        with (tabletArray[0])
            {
            tabletType = TABLET_ATK;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[1] = instance_create(x,y,objTablet);
        with (tabletArray[1])
            {
            tabletType = TABLET_SPEC;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        self.tabletArray[2] = instance_create(x,y,objTablet);
        with (tabletArray[2])
            {
            tabletType = TABLET_DEF;
            tabletName = TABLET_NAME_A;
            tabletLevel = TABLET_LEVEL_1;
            initializeFlag = true;
            }
        }
    
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.selectedNewChar == true) //check for newly selceted character
    {
    if (global.selectedChar != currentSelectedChar) //same character check
        {
        if (currentSelectedChar &gt; 0)//first click check
            {
            with (currentSelectedChar.object_index) //reset currect character items
                {
                for (i = 0; i &lt; 5; i += 1)
                    {
                    if (tabletArray[i] != 0)
                        {
                        with (tabletArray[i]) //objTablet
                            {
                            visible = false;
                            }
                        }
                    }
                }
            }
        with (global.selectedChar.object_index)
            {
            for (i = 0; i &lt; 5; i += 1)
                {
                if (tabletArray[i] != 0)
                    {
                    with (tabletArray[i]) //objTablet
                        {
                        image_angle = objCorner_GUI.tabletAngleArray[other.i];
                        visible = true;
                        if path_exists(tabletPath)
                            {
                            path_clear_points(tabletPath);
                            path_add_point(tabletPath,x,y,4);
                            path_add_point(tabletPath,objCorner_GUI.tabletXArray[other.i],objCorner_GUI.tabletYArray[other.i],4);
                            path_set_kind(tabletPath,1);
                            path_set_precision(tabletPath, 1);
                            path_set_closed(tabletPath, false); 
                            }
                        //move_towards_point(objCorner_GUI.tabletXArray[other.i],objCorner_GUI.tabletYArray[other.i],4.0);
                        path_start(tabletPath,400,0,true);
                        }
                    }
                }
            }
        currentSelectedChar = global.selectedChar;
        global.selectedNewChar = false;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseGridCoord[0] = 0; //X
mouseGridCoord[1] = 0; //Y

mouseGridCoord = DetermineMouseGridCoord();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW BASIC GRID
cellSize = 32;
for (i = 0; i &lt;= room_width; i += cellSize)
    {
    for (j = 0; j &lt;= 464; j += cellSize)
        {
        draw_sprite(sprGrid,1,i,j);
        }
    }

    
if (selectedChar &gt; 0)
    {
    //DRAW SELECTED CHARACTER HIGHLIGHT
    characterWidth = selectedChar.object_index.sprite_width;
    characterHeight = selectedChar.object_index.sprite_height;
    characterOriginX = selectedChar.object_index.x + (selectedChar.object_index.sprite_width / -2);
    characterOriginY = selectedChar.object_index.y + (selectedChar.object_index.sprite_height / -2);
    for (i = characterOriginX; i &lt; characterOriginX + characterWidth; i += cellSize)
        {
        for (j = characterOriginY; j &lt; characterOriginY + characterHeight; j += cellSize)
            {
            draw_sprite_ext(sprGrid,1,i,j,1,1,0,c_yellow,1);
            }
        }
    //DRAW MOVEMENT GRID OVERLAY
    //first we need to determine character origin in grid
    for (i = 0; i &lt; array_height_2d(selectedChar.object_index.moveGrid); i += 1)
        {
        for (j = 0; j &lt; array_length_2d(selectedChar.object_index.moveGrid,0); j += 1)
            {
            if (selectedChar.object_index.moveGrid[i,j] == 2)
                {
                gridX = j;
                gridY = i;
                }
            }
        }
    //set grid origin based on character origin
    gridX = characterOriginX - (cellSize * gridX);
    gridY = characterOriginY - (cellSize * gridY);
    for (i = 0; i &lt; array_height_2d(selectedChar.object_index.moveGrid); i += 1)
        {
        for (j = 0; j &lt; array_length_2d(selectedChar.object_index.moveGrid,0); j += 1)
            {
            if (selectedChar.object_index.moveGrid[i,j] == 1)
                {
                tempX = gridX + (cellSize * j);
                tempY = gridY + (cellSize * i);
                draw_sprite_ext(sprGrid,1,tempX,tempY,1,1,0,c_green,1);
                }
            
            }
        }
    }

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
