<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>objCharacter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastStepMoved = 2;
lastStepPathUpdated = 5;
moveSpeed = 1.5;
characterImageSpeed = 0.2;
image_speed = characterImageSpeed;
//spiritPath = path_add(); //&lt;-----moved to objCharacter
shortPath = path_add();
//gridToUse = SIZE_32_GRID; //&lt;-----moved to objCharacter

//flags
//movingFlag = false; //&lt;-----moved to objCharacter
pathResetFlag = false;


//sprites
upSprite = sprBlockB;
downSprite = sprBlockB;
sideSprite = sprBlockB;

//TABLETS //&lt;-----moved to objCharacter
//tablet1
/*
tabletArray[0] = 0;
tabletArray[1] = 0;
tabletArray[2] = 0;
tabletArray[3] = 0;
tabletArray[4] = 0;
*/

//debug variables //DELETE//
//debugX = 31;
//debugY = 32;
//prevDebugDirection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.lastStepMoved = global.stepCounter;
path_speed = 0;
movingFlag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if objAIController is going to allow instance to take a a turn
if (takeTurnFlag == true)
    {
    var stepsAllowedToMove = 2; //determines how far instance will travel every player step
    var stepsBeforePathCheck = 5;
    //SpiritMoveControl();
    
    //every stepsBeforePathCheck player steps do stuff
    if (global.stepCounter &gt;= (self.lastStepPathUpdated + stepsBeforePathCheck))
        {
        AISpiritPather(self.gridToUse,objPlayer.x,objPlayer.y);
        self.lastStepPathUpdated = global.stepCounter;
        pathResetFlag = true;
        }
    
    //If player stepped, let spirit move
    //check if 
    if (global.stepCounter &gt; self.lastStepMoved)
        {
        if (path_exists(spiritPath) &amp;&amp; path_get_length(spiritPath) &gt; 0) 
            {
            //calculate path position based on speed
            // length (pixels) speed (pixels/step)
            //move towards that x y point
            var moveLength,pathPosition,newPathX,newPathY,prevDirection;
            moveLength = moveSpeed * (global.stepCounter - self.lastStepPathUpdated);
            pathPosition = moveLength/path_get_length(spiritPath);
            newPathX = path_get_x(spiritPath,pathPosition);
            newPathY = path_get_y(spiritPath,pathPosition);
            //now move towards new point
            //path_delete(shortPath);
            prevDirection = self.direction;
            if mp_linear_path(shortPath, newPathX, newPathY, moveSpeed, 0) 
                {
                path_start(shortPath, moveSpeed, 0, 1);
                self.direction = prevDirection;
                }
            lastStepMoved = global.stepCounter;
            movingFlag = true;
            }
        }
    }
if (self.x == path_get_x(shortPath,1) )
    {
    movingFlag = false;
    }
takeTurnFlag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (position_meeting(mouse_x, mouse_y, id)) 
    {
    global.selectedChar = self.id;
    global.selectedNewChar = true;
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (path_exists(self.spiritPath))
    {
    draw_path(spiritPath,x,y,false); 
    }
npcDirectionDescision(upSprite,sideSprite,downSprite)
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
